/**
 *   Copyright 2007-2017 by DHC Software co.
 *   创建人：sxq
 *   联系方式：
 *   创建时间：2017-05-17 10:41
 *   简介：
 *   路由：
 *   更改历史：
 *   更改人|更改时间|更改内容|代码位置编号|
 */
'use strict';
import ReactNative, {
    requireNativeComponent,
    View,
    NativeModules,
    Platform,
    DeviceEventEmitter,
    UIManager,
    PermissionsAndroid
} from "react-native";
import React, { Component, PropTypes } from "react";

let RCT_BM_ROUTE_REF = "RouteMap";
let RCTBMRouteView = requireNativeComponent('RCTBMRouteView', RouteMap);

export default class RouteMap extends Component {

    static defaultProps = {
        models: [],
        callback: (routeInfo) => { console.warn(JSON.stringify(routeInfo)) },
        locationCallBack: (point) => { console.warn(JSON.stringify(point)) }
    };

    static propTypes = {
        models: PropTypes.arrayOf(Object),
        callback: PropTypes.func
    };

    componentDidMount() {}

    getWebViewHandle = () => {
        return ReactNative.findNodeHandle(this.refs[RCT_BM_ROUTE_REF]);
    };

    drawRouteWithIndex(index) {
        UIManager.dispatchViewManagerCommand(
            this.getWebViewHandle(),
            UIManager.RCTBMRouteView.Commands.drawRouteWithIndex, [index]
        );
        DeviceEventEmitter.once('RouteSuccessed', resp => {
            this.props.callback(resp["routeInfo"])
        });
    }

    drawRouteFromIndexTo(location) {
        UIManager.dispatchViewManagerCommand(
            this.getWebViewHandle(),
            UIManager.RCTBMRouteView.Commands.drawRouteFromIndexTo, [location]
        );
        DeviceEventEmitter.once('RouteSuccessed', resp => {
            this.props.callback(resp["routeInfo"])
        });
    }

    setCenterWithIndex(index) {
        UIManager.dispatchViewManagerCommand(
            this.getWebViewHandle(),
            UIManager.RCTBMRouteView.Commands.setCenterWithIndex, [index]
        );
    }

    hide() {
        if (Platform.OS !== "ios") {
            UIManager.dispatchViewManagerCommand(
                this.getWebViewHandle(),
                UIManager.RCTBMRouteView.Commands.hide,
                null
            );
        }
    }

    show() {
        if (Platform.OS !== "ios") {
            UIManager.dispatchViewManagerCommand(
                this.getWebViewHandle(),
                UIManager.RCTBMRouteView.Commands.show,
                null
            );
        }
    }

    doLocation() {
        UIManager.dispatchViewManagerCommand(
            this.getWebViewHandle(),
            UIManager.RCTBMRouteView.Commands.gainLocation,
            null
        );
        DeviceEventEmitter.once('onGainLocationResult', resp => {
            this.props.locationCallBack(resp)
        });
    }

    render() {
        return <RCTBMRouteView {...this.props }
        ref = { RCT_BM_ROUTE_REF }
        />;
    }
}