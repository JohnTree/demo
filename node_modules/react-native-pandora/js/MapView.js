import ReactNative, {
    requireNativeComponent,
    View,
    NativeModules,
    Platform,
    DeviceEventEmitter,
    UIManager,
    PermissionsAndroid
} from "react-native";
import React, {Component, PropTypes} from "react";
import MapTypes from "./MapTypes";
var RCT_BMP_REF = 'bmp';
export default class MapView extends Component {
    static propTypes = {
        ...View.propTypes,
        zoomControlsVisible: PropTypes.bool,
        trafficEnabled: PropTypes.bool,
        baiduHeatMapEnabled: PropTypes.bool,
        mapType: PropTypes.number,
        zoom: PropTypes.number,
        center: PropTypes.object,
        marker: PropTypes.object,
        markers: PropTypes.array,
        location: PropTypes.object,
        childrenPoints: PropTypes.array,
        onMapStatusChangeStart: PropTypes.func,
        onMapStatusChange: PropTypes.func,
        onMapStatusChangeFinish: PropTypes.func,
        onMapLoaded: PropTypes.func,
        onMapClick: PropTypes.func,
        onMapDoubleClick: PropTypes.func,
        onMarkerClick: PropTypes.func,
        onMapPoiClick: PropTypes.func
    };

    static defaultProps = {
        zoomControlsVisible: true,
        trafficEnabled: false,
        baiduHeatMapEnabled: false,
        mapType: MapTypes.NORMAL,
        childrenPoints: [],
        marker: null,
        markers: [],
        center: null,
        zoom: 10
    };

    constructor() {
        super();
    }

    _onChange(event) {
        if (typeof this.props[event.nativeEvent.type] === 'function') {
            this.props[event.nativeEvent.type](event.nativeEvent.params);
        }
    }

    getWebViewHandle = () => {
        return ReactNative.findNodeHandle(this.refs[RCT_BMP_REF]);
    };

    requestPermission = (permission) => {
        return PermissionsAndroid.request(
            permission
        );
    }
    doLocation = () => {
        return new Promise((resolve, reject) => {
            try {
                UIManager.dispatchViewManagerCommand(
                    this.getWebViewHandle(),
                    UIManager.RCTBaiduMapView.Commands.gainLocation,
                    null
                );
            } catch (e) {
                reject(e);
                return;
            }
            DeviceEventEmitter.once('onGainLocationResult', resp => {
                resolve(resp);
            });
        });
    }

    gainLocation() {
        if (Platform.OS === 'android') {
            return this.requestPermission("android.permission.ACCESS_COARSE_LOCATION", "定位").then(result => {
                if (result) {
                    return this.doLocation();
                } else {
                    return new Promise((resolve, reject) => {
                        reject({message: "定位失败"});
                    });
                }
            })
        } else {
            return this.doLocation();
        }
    }

    render() {
        return <BaiduMapView {...this.props} onChange={this._onChange.bind(this)}
                             ref={RCT_BMP_REF}/>;
    }
}

const BaiduMapView = requireNativeComponent('RCTBaiduMapView', MapView, {
    nativeOnly: {onChange: true}
});
